语言基于x86的汇编语言构成

set-register
    --使用vi test.asm，文件内编写汇编语言
    --nasm -f elf64 test.asm -o test.o //生成.o文件
    --ld test.o -o test  //生成可执行文件
    --/challenge/run ./test  //运行可执行文件
  imul and mul
    --imul为有符号乘法，mul为无符号乘法
  div除法逻辑
    --这是x86位的汇编语言十分特别,会默认将rax设置位被除数和商，rdx设置为余数
      --需要明白这些寄存器是被固定默认设置在这里的其中包括rax的被除数和商，rdx的余数
    --div rsi ， div 只需要接受一个参数，表示除数
    --其结果会被保存在rax中，余数会被保存在rdx中
    mov rax, rdi
    xor rax, rax
    div rsi
     --这个代码段的意思是将rdi的值赋给rax，然后将rax清零，然后将rdi除以rsi，结果保存在rax中，余数保存在rdx中
  
    -xor rax, rax
     mov rax, rdi
     div rsi
     mov rax, rdx
      --xor保证rax寄存器内的数字位0
      --mov rax, rdi将rdi的值赋给rax
      --div rsi将rdi除以rsi，结果保存在rax中，余数保存在rdx中
      --mov rax, rdx将rdx的值赋给rax
    
    
寄存器分析
  --rax有自带低32位寄存器eax
    --eax有自带低16位寄存器ax
    --ax有自带高八位寄存器ah和低八位寄存器al
  --rdi有32位寄存器edi
    --edi有16位寄存器di
    --di只有低八位寄存器dil
  --rsi有32位寄存器esi
    --esi有16位寄存器si
    --si只有低八位寄存器sil

除法但是快速运算
  --如果除数是2的n次方，那么就能得到最后的商和余数就是被除数的高n位和低n位

byte-extraction
  --mov rax, rdi
    shr rax, 32
    shl rax, 56
    shr rax, 56
      --此时需要提取的rdi的第5位，所以右移32位，然后左移56位，然后右移56位，就能得到rdi的第5位
        并且清楚其他位的数值
crash-course-check-even
  --and rdi, 1
    xor rax, rax
    xor rdi, 1
    or rax, rdi  mov和or都可以用于赋值但是or更高效
      --xor rax, rax将rax清零,使用异或操作，xor表示相同则为0，不同则为1
mov的使用
  --mov rax，rdi
    --这个操作的意思是将rdi的值赋给rax
  --mov rax,[rdi]
    --这个操作的意思是将rdi的值作为地址，将地址内的值赋给rax
  --mov rax,[0x12345678]
    --这个操作的意思是将0x12345678的值作为地址，将地址内的值赋给rax
  --mov [0x12345678],rax
    --这个操作的意思是将rax的值赋给0x12345678的地址
  --错误示范：mov [rax], 0xdeadbeef000013337
    --不要使用直接将大数据仿佛地址的操作，会导致程序崩溃
      --正确示范：mov rax, 0xdeadbeef000013337
                  mov [rax], rax
    --首先将较大数据存放在寄存器处理后，再防入想要存入的地址
  --mov rax, [rdi]
    mov rbx, [rdi+8]
    add rax, rbx
    mov [rsi], rax
      --所增加的八个地址偏移量的八所指的是八个字节，所以是64位
  
内存大小分布名称
  -byte = 1 byte= 8 bits //字节
  -word = 2 bytes = 16 bits //字
  -double word = 4 bytes = 32 bits //双字
  -quad word = 8 bytes = 64 bits //四字
寄存器内所指的64位32位8位都是值得bits，即为0和1

栈
  --栈是一种先进后出的数据结构
  --push rax
    --将rax的值压入栈，推入栈后不会影响rax的值，只是将rax的值复制一份压入栈
  --pop rax
    --将栈顶的值弹出到rax

jump跳跃
  -绝对跳跃
    --mov rax, [0x40300]
      jmp rax
        --再绝对跳转（跳转到特定地址）需要先将目标地址放入寄存器中，后才能够使用jmp命令。
  跳转中存在多个编译器所使用的多种不同跳转方式，此时只使用nasm编译器
    --section .text
      global _start
      _start:
      jmp jump_target
      times 0x51 nop --这个是nasm特有的跳转方式也是根据题意确定的
      jump_target:
      pop rdi
      mov rax, 0x403000
      jmp rax
        --题目要求要跳转到距离当前jump的x51个字节的地方，所以需要使用times 0x51 nop
        --如果不使用而是直接跳跃到指定标签的话，编译器会根据前面代码的长度来计算跳跃的位置，而不是所需的0x51个字节



在 x86-64 的 System V ABI（应用二进制接口）调用约定下，函数的前六个整数或指针类型的参数按如下方式传递：

寄存器	参数
rdi	第 1 个参数
rsi	第 2 个参数
rdx	第 3 个参数
rcx	第 4 个参数
r8	第 5 个参数
r9	第 6 个参数

most_common_byte(src_addr, size):
  i = 0
  while i <= size-1:
    curr_byte = [src_addr + i]
    [stack_base - curr_byte] += 1 //stack_base指的是栈顶地址，栈向下生长，所以需要rsp+偏移量

    i += 1

  b = 0
  max_freq = 0
  max_freq_byte = 0
  while b <= 0xff:
    if [stack_base - b] > max_freq:
      max_freq = [stack_base - b]
      max_freq_byte = b
    b += 1

  return max_freq_byte

    mov rbp, rsp
    sub rsp, 0x1000
    xor r8, r8
  loop:
    cmp r8, rsp
    jg next
      mov dl, byte [rdi+r8]
      add byte [rsp+rdl], 1
      inc r8
  next:
    xor rcx, rcx
    xor rdx, rdx
    xor rax, rax
    cmp rcx, oxff
    loop2:
      cmp [rsp+rcx], rdx
      jg  max_freq
      jmp inc
    max_freq:
      mov rdx, [rsp+rcx]
      mov rax, rcx
      jmp inc //这里具有争议可以无视
    inc:
      inc rcx
      jmp loop2
  done:
    mov rsp, rbp
    ret 
  //设置栈基地址为rbp，系统的栈基地址为rsp，所以需要将rsp赋值为rbp
  //sub rsp, 0x1000表示在栈上分配0x1000的空间，如果申请了额外空间则必须释放
    mov rsp,rbp
    如果直接push则还需要pop，如果直接mov则需要mov回去
    ret表示释放栈空间


mov rbp, rsp
  --将栈的基地址赋值给rbp使用，这样可以在后面直接使用栈，因为提前保存了栈的基地址
xor r8, r8
  --r8代表i，所以需要清零
loop:
  --循环开始
  cmp r8, rsi //原伪代码需要-1，所以这里有待考虑
    --比较r8和rsi的值
  jg next
    --如果r8大于rsi则跳转到next
    mov dl, byte [rdi+r8]
      --将rdi+r8的值赋给dl，因为前后的寄存器的位数不同，所以需要使用byte
    add byte [rso+rdl], 1
      --将rso+rdl的值加1, dl和rdl其实是一个寄存器但是位数不同
    inc r8
      --r8加1
next:
  xor rcx, rcx
    --清零rcx 
  xor rdx, rdx
    --清零rdx
  xor rax, rax
    --清零rax
  loop2:
    cmp rcx, 0xff
      --比较rcx和0xff
    jg done
        --如果rcx大于0xff则跳转到done
    cmp [rsp+rcx], rdx
      --比较[rsp+rcx]和rdx
    jg max_freq
      --如果[rsp+rcx]大于rdx则跳转到max_freq
    jmp inc
      --小于则跳转到inc
    max_freq:
      mov rdx, [rsp+rcx]
        --将[rsp+rcx]的值赋给rdx
      mov rax, rcx
        --将rcx的值赋给rax
      inc rcx
        --rcx加1,此处有争议
      jmp loop2
        --跳转到loop2
    inc:
      inc rcx
        --rcx加1
      jmp loop2
        --跳转到loop2
  done:
    mov rsp, rbp
      --将rbp的值赋给rsp，确保栈的基地址不变
    ret
      --返回，释放栈空间  
    这里可以作为标准格式进行与开头操作呼应